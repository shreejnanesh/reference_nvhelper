#!/usr/bin/bash -x
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '


#1. Write a sed script / one liners using the commands and various options

	#a. Using specific address and range of address
	####Tip: delete command also works for all these variation use command d to delete
		
		#print a single line
		echo '-----------------------------------------------------'
		sed -n '4p' netlist.v 

		#print a range of lines
		echo '-----------------------------------------------------'
		sed -n '1,10p' netlist.v 

		#3~2p prints every 2nd line starting from 3rd line
		echo '-----------------------------------------------------'
		sed -n '3~2p' netlist.v 

		#print over multiple range
		echo '-----------------------------------------------------'
		sed -n '1,2p;5,10p' netlist.v 

		#$p prints only the last line
		echo '-----------------------------------------------------'
		sed -n '$p' netlist.v 

		#prints from 10th to last line
		echo '-----------------------------------------------------'
		sed -n '10,$p' netlist.v 

	#b. Using specific pattern and range of patterns

		#display all the patterns
		echo '-----------------------------------------------------'
		sed -n -r '/^(.* \\r)/p' netlist.v 

		#display from 10th line to the pattern line
		echo '-----------------------------------------------------'
		sed -n '10,/DFFXL/p' netlist.v 
		
		#display between the range of patterns
		echo '-----------------------------------------------------'
		sed -n '/DFFXL/,/SDFFQXL/p' netlist.v 

		#display from pattern +3 lines
		echo '-----------------------------------------------------'
		sed -nr '/\(.*.D \(n_22\).*\)/,+3p' netlist.v 

	#c. Invert matches (!)

		#dispaly contents which is not in the pattern
		echo '-----------------------------------------------------'
		sed -nr '/\(.*.D\ \(n_22\).*\)/!p' netlist.v

		#dispaly contents except from the pattern till range (3lines)
		echo '-----------------------------------------------------'
		sed -nr '/\(.*.D \(n_22\).*\)/,+3!p' netlist.v 

	#d. Substitution command with various flags (s)
		#Syntax 
		#sed 'ADDRESSs/REGEXP/REPLACEMENT/FLAGS' filename
		#sed 'PATTERNs/REGEXP/REPLACEMENT/FLAGS' filename

		#replaces DFFXL with flopmodule globally (g-all occurances)
		echo '-----------------------------------------------------'
		sed 's/DFFXL/flopmodule/g' netlist.v

		#replaces DFFXL with flopmodule globally irespective of character case(i -Ignore case)
		echo '-----------------------------------------------------'
		sed 's/DFFXL/flopmodule/gi' netlist.v

		#sed pattern will be replaced and changes will be written (w) into the file
		echo '-----------------------------------------------------'
		sed 's/DFFXL/flopmodule/gw out.v' netlist.v

		#pattern will be printed to pattern buffer (p)
		echo '-----------------------------------------------------'
		sed -n 's/DFFXL/flopmodule/gp' netlist.v

		#multiline regex mode (m) helps ^ and $ to use effectively
		echo '-----------------------------------------------------'
		sed -nr 's/^ {0,}DFFXL/flopmodule/gmp' netlist.v

		#These commands are used for case conversion and used in replacement area
		#\L -Turn the replacement to lowercase until a \U or \E is found,
		#\l -Turn the next character to lowercase,
		#\U -Turn the replacement to uppercase until a \L or \E is found,
		#\u -Turn the next character to uppercase,
		#\E -Stop case conversion started by \L or \U.
		#replaces second repetation, also you can give range
		echo '-----------------------------------------------------'
		sed 's/DFFXL/\uflop\Umo\ld\Lul\ue/wg' netlist.v		

		#just replace the second pattern match 
		echo '-----------------------------------------------------'
		sed 's/result/res/2' netlist.v

		#there are multiple delimiter in sed like @ % | ; :

		#Backreference result_reg is replaced with result for grouping we need to use \(pattern\) or use along with -r option
		echo '-----------------------------------------------------'
		sed 's/\(result\)_reg/\1/g' netlist.v


	#e. Append (a)
		#append contents into the pattern buffer, below command appends after 1st line
		echo '-----------------------------------------------------'
		sed '1 a Contents of Netlist Files' netlist.v 

		#below command appends after the pattern
		echo '-----------------------------------------------------'
		sed '/DFFXL/a this is a qual pin dff' netlist.v 
		
		#below command appends after the End Of File (EOF)
		echo '-----------------------------------------------------'
		sed '$a End of netlist file' netlist.v 


	#f. Insert(i)
		#inserts contents into the pattern buffer, below command inserts in 1st line
		echo '-----------------------------------------------------'
		sed '1 i Contents of Netlist Files' netlist.v 

		#below command inserts before the pattern
		echo '-----------------------------------------------------'
		sed '/DFFXL/i this is a qual pin dff' netlist.v 
		
		#below command inserts a line before the End Of File (EOF)
		echo '-----------------------------------------------------'
		sed '$i End of netlist file' netlist.v 

	#g. Change/Replace (c)
		#changes contents in the pattern buffer, below command replaces contents in 1st line
		echo '-----------------------------------------------------'
		sed '1 c Contents of Netlist Files' netlist.v 

		#below command changes where pattern exactly matches
		echo '-----------------------------------------------------'
		sed '/DFFXL/c this is a qual pin dff' netlist.v 
		
		#below command changes at End Of File (EOF)
		echo '-----------------------------------------------------'
		sed '$c End of netlist file' netlist.v 

	#h. Grouping ({})
	#A group of commands may be enclosed between { and } characters.
		echo '-----------------------------------------------------' 
		sed -n '{/DFFXL/p; 5p; 20p}' netlist.v

	#i. Comment (#)
		#All characters following ‘#’ until the next newline are ignored.
		#since after # is commented output will be 1 2 3
		echo '-----------------------------------------------------'
		seq 3 | sed '# this is a comment ; 2d'
		
		#since after # is commented until newline, 2d will be executed. output is 1 3.
		echo '-----------------------------------------------------'
		seq 3 | sed '# this is a comment
		2d'

	#j. Translate (y)
		#Transliterate any characters in the pattern space which match any of the source-chars with the corresponding character in dest-chars.
		echo '-----------------------------------------------------'
		sed -r 'y/ABCD/abcd/' netlist.

	#k. Write(w)
		#Write the pattern space to filename.
		#write the first line to out.txt
		echo '-----------------------------------------------------'
		sed -n '1w out.txt' netlist.v

		#write the first and last line to out.txt
		echo '-----------------------------------------------------'
		sed -n -e '1w out.txt' -e '$w out.txt' netlist.v

		#write the matched pattern to the file
		echo '-----------------------------------------------------'
		sed -n '/DFFXL/w out.txt' netlist.v

		#write the matched pattern and next two lines to the file
		echo '-----------------------------------------------------'
		sed -n '/DFFXL/,+2w out.txt' netlist.v

	#m. Next(n,N)
		#“N” for Multi-Line Operations.

		#updates pattern in alternate lines
		echo '-----------------------------------------------------'
		sed '{n;/result/ {s/result/res/g}}' netlist.v

		#prints the pattern line and the next line
		echo '-----------------------------------------------------'
   		sed -n '/DFFXL/{p;n;p;}' netlist.v

	#n. Hold (h,H)
		#h (hold) function copies the contents of the pattern space into a holding area (also called as sed hold space), destroying any previous contents of the holding area.
		#The H function appends the contents of the pattern space to the contents of the holding area. The former and new contents are separated by a newline.
		echo '-----------------------------------------------------'
    	seq 5 | sed '/2/{h;d};/4/x' 

	#o. Get(g,G)
		#The g function copies the contents of the holding area into the pattern space, destroying the previous contents of the pattern space.
		#The G function appends the contents of the holding area to the contents of the pattern space. The former and new contents are separated by a newline. The maximum number of addresses is two.

		#this will add extra new line for each line
		echo '-----------------------------------------------------'
		sed 'G' netlist.v

		#this will print the contents in reverse from last line tp first
		echo '-----------------------------------------------------'
		sed -n '1!G;h;$p' netlist.v

	#p. Exchange(x)
		#The exchange function interchanges the contents of the pattern space and the holding area. The maximum number of addresses is two.
		echo '-----------------------------------------------------'
		sed -n -e '/^$/{x;d}' -e '/./x;p' netlist.v

	#q. Quit (qQ)

		#exits without processing more commands and prints until the last command, with custom exit status. this will print the first 3 lines
		echo '-----------------------------------------------------'
		sed 's/\bDFFXL\b/register/g;3q100' netlist.v
		
		#exits without processing more commands and prints until previous instrucion, with custom exit status. this will print the first 2 lines from netlist files
		echo '-----------------------------------------------------'
		sed 's/\bDFFXL\b/register/g;3Q120' netlist.v

	#r. Print current line number to STDOUT(=)
		#prints the line number inside pattern range
		echo '-----------------------------------------------------'
		sed -nr '/\(.*.D \(n_22\).*\)/,+3=' netlist.v
		
		#prints the pattern range along with the line number
		echo '-----------------------------------------------------'
		sed -nr '/\(.*.D \(n_22\).*\)/,+3{
		 =
		 p
		 }' netlist.v

		#prints total number of lines
		echo '-----------------------------------------------------'
		sed '$=' netlist.v


	#s. Execute(e)
	#execute multiple command using -e
	#delete 4th and second line frome the input file
	echo '-----------------------------------------------------'
	sed -e '4d' -e '2d' netlist.v

	#print contents which has the pattern DFFXL and DFFQX#
	echo '-----------------------------------------------------'
	sed -n  -e '/DFFXL/p'  -e '/DFFQX3/p'  netlist.v

	#delete first last and empty line
	echo '-----------------------------------------------------'
	sed -e '1d' -e '$d' -e '/^$/d' netlist.v
